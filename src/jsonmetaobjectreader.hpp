/* Copyright (c) 2014, The Nuria Project
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *    1. The origin of this software must not be misrepresented; you must not
 *       claim that you wrote the original software. If you use this software
 *       in a product, an acknowledgment in the product documentation would be
 *       appreciated but is not required.
 *    2. Altered source versions must be plainly marked as such, and must not be
 *       misrepresented as being the original software.
 *    3. This notice may not be removed or altered from any source
 *       distribution.
 */

#ifndef NURIA_JSONMETAOBJECTREADER_HPP
#define NURIA_JSONMETAOBJECTREADER_HPP

#include <QSharedData>
#include <QStringList>
#include <QString>

#include "essentials.hpp"
#include "metaobject.hpp"

namespace Nuria {

class JsonMetaObjectReaderPrivate;

/**
 * \brief JsonMetaObjectReader is a parser for MetaObject data stored in JSON
 * format as generated by Tria.
 * 
 * \par Usage
 * First, you'll need to tell Tria to generate JSON data by using the
 * "-json-output" (Or "-j" for short) flag. Please refer to "-help" for further
 * information.
 * After that you can use JsonMetaObjectReader to read the data itself in again.
 * 
 * Please note that the JSON format can store information about multiple source
 * files at once.
 * 
 * \warning Nuria::MetaObject instances returned by methods of this class are
 * owned by the instance. When the reader instance gets destroyed, all
 * MetaObjects will be destroyed too!
 * 
 * \note The JSON format is documented in Tria's source in src/jsongenerator.hpp
 * 
 * \par Limitations
 * Please note that a lot functionality is lost, for example MetaObjects created
 * by this class are not able to call methods. Annotations are currently limited
 * to POD-types and QString.
 */
class NURIA_CORE_EXPORT JsonMetaObjectReader : public QObject {
	Q_OBJECT
	Q_ENUMS(Error)
public:
	
	/**
	 * All possible error codes.
	 */
	enum Error {
		NoError = 0, ///< No error occured.
		JsonParseError, ///< The raw JSON data failed to parse.
		
		/** The root of the json document must be an object. */
		RootIsNotAnObject,
		
		/** All children of root must be objects. */
		FileIsNotAnObject,
		TypeIsNotAnObject,
		
		/**
		 * \addtogroup Type-level json-type checks.
		 * @{
		 */
		AnnotationsIsNotAnArray,
		BasesIsNotAnArray,
		ConstructorsIsNotAnArray,
		MemberMethodsIsNotAnArray,
		StaticMethodsIsNotAnArray,
		EnumsIsNotAnObject,
		FieldsIsNotAnObject,
		BasesContainsNonString,
		/** @} */
		
		/**
		 * \addtogroup Annotation-level json-type checks.
		 * @{
		 */
		AnnotationIsNotAnObject,
		AnnotationNameIsNotAString,
		
		/**
		 * The 'value' item must be of type bool, integer/number,
		 * array or object. If it's an array or object, all children
		 * of those must be of type bool, integer/number or string.
		 */
		AnnotationValueHasUnknownType,
		/** @} */
		
		/**
		 * \addtogroup Method-level json-type checks.
		 * @{
		 */
		MethodIsNotAnObject,
		MethodNameIsNotAString,
		MethodResultTypeIsNotAString,
		
		/** argumentNames.length != argumentTypes.length */
		MethodArgumentsHaveDifferentLengths,
		MethodArgumentNamesIsNotAnArray,
		MethodArgumentNamesContainsNonString,
		MethodArgumentTypesIsNotAnArray,
		MethodArgumentTypesContainsNonString,
		/** @} */
		
		/**
		 * \addtogroup Enum-level json-type checks.
		 * @{
		 */
		EnumIsNotAnObject,
		EnumValuesIsNotAnObject,
		EnumValueObjectValueIsNotAnInteger,
		/** @} */
		
		/**
		 * \addtogroup Field-level json-type checks.
		 * @{
		 */
		FieldIsNotAnObject,
		FieldTypeIsNotAString,
		FieldReadOnlyIsNotABoolean
		/** @} */
		
	};
	
	/** Constructor. \sa parse */
	explicit JsonMetaObjectReader (QObject *parent = 0);
	
	/** Destructor. */
	~JsonMetaObjectReader ();
	
	/**
	 * Parses \a jsonDocument. The format is expected to match the
	 * one documented in Tria. Returns \c NoError on success. If a error
	 * occured the corresponding error code is returned.
	 */
	Error parse (const QJsonDocument &jsonDocument);
	
	/** \overload */
	Error parse (const QJsonObject &root);
	
	/** \overload */
	Error parse (const QByteArray &jsonData);
	
	/**
	 * Returns a list of all known source files.
	 * \sa metaObjects
	 */
	QStringList sourceFiles ();
	
	/**
	 * Returns the map of all known types in \a sourceFile.
	 * \sa sourceFiles
	 */
	MetaObjectMap metaObjects (const QString &sourceFile);
	
private:
	JsonMetaObjectReaderPrivate *d_ptr;
};

}

#endif // NURIA_JSONMETAOBJECTREADER_HPP
